package info.openmeta.framework.orm.domain.antlr.gen;

import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.ATN;
import org.antlr.v4.runtime.atn.ATNDeserializer;
import org.antlr.v4.runtime.atn.LexerATNSimulator;
import org.antlr.v4.runtime.atn.PredictionContextCache;
import org.antlr.v4.runtime.dfa.DFA;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast", "CheckReturnValue", "this-escape"})
public class FilterExprLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.13.1", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, AND=6, OR=7, FIELD=8, OPERATOR=9, 
		NUMBER=10, BOOLEAN=11, QUOTED_STRING=12, WS=13;
	public static String[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	private static String[] makeRuleNames() {
		return new String[] {
			"T__0", "T__1", "T__2", "T__3", "T__4", "AND", "OR", "FIELD", "OPERATOR", 
			"NUMBER", "BOOLEAN", "QUOTED_STRING", "WS"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, "'('", "')'", "'['", "','", "']'", "'AND'", "'OR'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, null, null, null, null, null, "AND", "OR", "FIELD", "OPERATOR", 
			"NUMBER", "BOOLEAN", "QUOTED_STRING", "WS"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}


	public FilterExprLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "FilterExpr.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getChannelNames() { return channelNames; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\u0004\u0000\r\u00c5\u0006\uffff\uffff\u0002\u0000\u0007\u0000\u0002\u0001"+
		"\u0007\u0001\u0002\u0002\u0007\u0002\u0002\u0003\u0007\u0003\u0002\u0004"+
		"\u0007\u0004\u0002\u0005\u0007\u0005\u0002\u0006\u0007\u0006\u0002\u0007"+
		"\u0007\u0007\u0002\b\u0007\b\u0002\t\u0007\t\u0002\n\u0007\n\u0002\u000b"+
		"\u0007\u000b\u0002\f\u0007\f\u0001\u0000\u0001\u0000\u0001\u0001\u0001"+
		"\u0001\u0001\u0002\u0001\u0002\u0001\u0003\u0001\u0003\u0001\u0004\u0001"+
		"\u0004\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0006\u0001"+
		"\u0006\u0001\u0006\u0001\u0007\u0001\u0007\u0005\u0007/\b\u0007\n\u0007"+
		"\f\u00072\t\u0007\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001"+
		"\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001"+
		"\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001"+
		"\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001"+
		"\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001"+
		"\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001"+
		"\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001"+
		"\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001"+
		"\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001"+
		"\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001"+
		"\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001"+
		"\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0003\b\u009a\b\b\u0001\t\u0004"+
		"\t\u009d\b\t\u000b\t\f\t\u009e\u0001\t\u0001\t\u0004\t\u00a3\b\t\u000b"+
		"\t\f\t\u00a4\u0003\t\u00a7\b\t\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n"+
		"\u0001\n\u0001\n\u0001\n\u0001\n\u0003\n\u00b2\b\n\u0001\u000b\u0001\u000b"+
		"\u0001\u000b\u0001\u000b\u0005\u000b\u00b8\b\u000b\n\u000b\f\u000b\u00bb"+
		"\t\u000b\u0001\u000b\u0001\u000b\u0001\f\u0004\f\u00c0\b\f\u000b\f\f\f"+
		"\u00c1\u0001\f\u0001\f\u0000\u0000\r\u0001\u0001\u0003\u0002\u0005\u0003"+
		"\u0007\u0004\t\u0005\u000b\u0006\r\u0007\u000f\b\u0011\t\u0013\n\u0015"+
		"\u000b\u0017\f\u0019\r\u0001\u0000\u0005\u0001\u0000az\u0003\u000009A"+
		"Zaz\u0001\u000009\u0002\u0000\"\"\\\\\u0003\u0000\t\n\r\r  \u00dd\u0000"+
		"\u0001\u0001\u0000\u0000\u0000\u0000\u0003\u0001\u0000\u0000\u0000\u0000"+
		"\u0005\u0001\u0000\u0000\u0000\u0000\u0007\u0001\u0000\u0000\u0000\u0000"+
		"\t\u0001\u0000\u0000\u0000\u0000\u000b\u0001\u0000\u0000\u0000\u0000\r"+
		"\u0001\u0000\u0000\u0000\u0000\u000f\u0001\u0000\u0000\u0000\u0000\u0011"+
		"\u0001\u0000\u0000\u0000\u0000\u0013\u0001\u0000\u0000\u0000\u0000\u0015"+
		"\u0001\u0000\u0000\u0000\u0000\u0017\u0001\u0000\u0000\u0000\u0000\u0019"+
		"\u0001\u0000\u0000\u0000\u0001\u001b\u0001\u0000\u0000\u0000\u0003\u001d"+
		"\u0001\u0000\u0000\u0000\u0005\u001f\u0001\u0000\u0000\u0000\u0007!\u0001"+
		"\u0000\u0000\u0000\t#\u0001\u0000\u0000\u0000\u000b%\u0001\u0000\u0000"+
		"\u0000\r)\u0001\u0000\u0000\u0000\u000f,\u0001\u0000\u0000\u0000\u0011"+
		"\u0099\u0001\u0000\u0000\u0000\u0013\u009c\u0001\u0000\u0000\u0000\u0015"+
		"\u00b1\u0001\u0000\u0000\u0000\u0017\u00b3\u0001\u0000\u0000\u0000\u0019"+
		"\u00bf\u0001\u0000\u0000\u0000\u001b\u001c\u0005(\u0000\u0000\u001c\u0002"+
		"\u0001\u0000\u0000\u0000\u001d\u001e\u0005)\u0000\u0000\u001e\u0004\u0001"+
		"\u0000\u0000\u0000\u001f \u0005[\u0000\u0000 \u0006\u0001\u0000\u0000"+
		"\u0000!\"\u0005,\u0000\u0000\"\b\u0001\u0000\u0000\u0000#$\u0005]\u0000"+
		"\u0000$\n\u0001\u0000\u0000\u0000%&\u0005A\u0000\u0000&\'\u0005N\u0000"+
		"\u0000\'(\u0005D\u0000\u0000(\f\u0001\u0000\u0000\u0000)*\u0005O\u0000"+
		"\u0000*+\u0005R\u0000\u0000+\u000e\u0001\u0000\u0000\u0000,0\u0007\u0000"+
		"\u0000\u0000-/\u0007\u0001\u0000\u0000.-\u0001\u0000\u0000\u0000/2\u0001"+
		"\u0000\u0000\u00000.\u0001\u0000\u0000\u000001\u0001\u0000\u0000\u0000"+
		"1\u0010\u0001\u0000\u0000\u000020\u0001\u0000\u0000\u00003\u009a\u0005"+
		"=\u0000\u000045\u0005!\u0000\u00005\u009a\u0005=\u0000\u00006\u009a\u0005"+
		">\u0000\u000078\u0005>\u0000\u00008\u009a\u0005=\u0000\u00009\u009a\u0005"+
		"<\u0000\u0000:;\u0005<\u0000\u0000;\u009a\u0005=\u0000\u0000<=\u0005H"+
		"\u0000\u0000=>\u0005A\u0000\u0000>\u009a\u0005S\u0000\u0000?@\u0005N\u0000"+
		"\u0000@A\u0005O\u0000\u0000AB\u0005T\u0000\u0000BC\u0005 \u0000\u0000"+
		"CD\u0005H\u0000\u0000DE\u0005A\u0000\u0000E\u009a\u0005S\u0000\u0000F"+
		"G\u0005S\u0000\u0000GH\u0005T\u0000\u0000HI\u0005A\u0000\u0000IJ\u0005"+
		"R\u0000\u0000JK\u0005T\u0000\u0000KL\u0005 \u0000\u0000LM\u0005W\u0000"+
		"\u0000MN\u0005I\u0000\u0000NO\u0005T\u0000\u0000O\u009a\u0005H\u0000\u0000"+
		"PQ\u0005N\u0000\u0000QR\u0005O\u0000\u0000RS\u0005T\u0000\u0000ST\u0005"+
		" \u0000\u0000TU\u0005S\u0000\u0000UV\u0005T\u0000\u0000VW\u0005A\u0000"+
		"\u0000WX\u0005R\u0000\u0000XY\u0005T\u0000\u0000YZ\u0005 \u0000\u0000"+
		"Z[\u0005W\u0000\u0000[\\\u0005I\u0000\u0000\\]\u0005T\u0000\u0000]\u009a"+
		"\u0005H\u0000\u0000^_\u0005I\u0000\u0000_\u009a\u0005N\u0000\u0000`a\u0005"+
		"N\u0000\u0000ab\u0005O\u0000\u0000bc\u0005T\u0000\u0000cd\u0005 \u0000"+
		"\u0000de\u0005I\u0000\u0000e\u009a\u0005N\u0000\u0000fg\u0005B\u0000\u0000"+
		"gh\u0005E\u0000\u0000hi\u0005T\u0000\u0000ij\u0005W\u0000\u0000jk\u0005"+
		"E\u0000\u0000kl\u0005E\u0000\u0000l\u009a\u0005N\u0000\u0000mn\u0005N"+
		"\u0000\u0000no\u0005O\u0000\u0000op\u0005T\u0000\u0000pq\u0005 \u0000"+
		"\u0000qr\u0005B\u0000\u0000rs\u0005E\u0000\u0000st\u0005T\u0000\u0000"+
		"tu\u0005W\u0000\u0000uv\u0005E\u0000\u0000vw\u0005E\u0000\u0000w\u009a"+
		"\u0005N\u0000\u0000xy\u0005I\u0000\u0000yz\u0005S\u0000\u0000z{\u0005"+
		" \u0000\u0000{|\u0005S\u0000\u0000|}\u0005E\u0000\u0000}\u009a\u0005T"+
		"\u0000\u0000~\u007f\u0005I\u0000\u0000\u007f\u0080\u0005S\u0000\u0000"+
		"\u0080\u0081\u0005 \u0000\u0000\u0081\u0082\u0005N\u0000\u0000\u0082\u0083"+
		"\u0005O\u0000\u0000\u0083\u0084\u0005T\u0000\u0000\u0084\u0085\u0005 "+
		"\u0000\u0000\u0085\u0086\u0005S\u0000\u0000\u0086\u0087\u0005E\u0000\u0000"+
		"\u0087\u009a\u0005T\u0000\u0000\u0088\u0089\u0005P\u0000\u0000\u0089\u008a"+
		"\u0005A\u0000\u0000\u008a\u008b\u0005R\u0000\u0000\u008b\u008c\u0005E"+
		"\u0000\u0000\u008c\u008d\u0005N\u0000\u0000\u008d\u008e\u0005T\u0000\u0000"+
		"\u008e\u008f\u0005 \u0000\u0000\u008f\u0090\u0005O\u0000\u0000\u0090\u009a"+
		"\u0005F\u0000\u0000\u0091\u0092\u0005C\u0000\u0000\u0092\u0093\u0005H"+
		"\u0000\u0000\u0093\u0094\u0005I\u0000\u0000\u0094\u0095\u0005L\u0000\u0000"+
		"\u0095\u0096\u0005D\u0000\u0000\u0096\u0097\u0005 \u0000\u0000\u0097\u0098"+
		"\u0005O\u0000\u0000\u0098\u009a\u0005F\u0000\u0000\u00993\u0001\u0000"+
		"\u0000\u0000\u00994\u0001\u0000\u0000\u0000\u00996\u0001\u0000\u0000\u0000"+
		"\u00997\u0001\u0000\u0000\u0000\u00999\u0001\u0000\u0000\u0000\u0099:"+
		"\u0001\u0000\u0000\u0000\u0099<\u0001\u0000\u0000\u0000\u0099?\u0001\u0000"+
		"\u0000\u0000\u0099F\u0001\u0000\u0000\u0000\u0099P\u0001\u0000\u0000\u0000"+
		"\u0099^\u0001\u0000\u0000\u0000\u0099`\u0001\u0000\u0000\u0000\u0099f"+
		"\u0001\u0000\u0000\u0000\u0099m\u0001\u0000\u0000\u0000\u0099x\u0001\u0000"+
		"\u0000\u0000\u0099~\u0001\u0000\u0000\u0000\u0099\u0088\u0001\u0000\u0000"+
		"\u0000\u0099\u0091\u0001\u0000\u0000\u0000\u009a\u0012\u0001\u0000\u0000"+
		"\u0000\u009b\u009d\u0007\u0002\u0000\u0000\u009c\u009b\u0001\u0000\u0000"+
		"\u0000\u009d\u009e\u0001\u0000\u0000\u0000\u009e\u009c\u0001\u0000\u0000"+
		"\u0000\u009e\u009f\u0001\u0000\u0000\u0000\u009f\u00a6\u0001\u0000\u0000"+
		"\u0000\u00a0\u00a2\u0005.\u0000\u0000\u00a1\u00a3\u0007\u0002\u0000\u0000"+
		"\u00a2\u00a1\u0001\u0000\u0000\u0000\u00a3\u00a4\u0001\u0000\u0000\u0000"+
		"\u00a4\u00a2\u0001\u0000\u0000\u0000\u00a4\u00a5\u0001\u0000\u0000\u0000"+
		"\u00a5\u00a7\u0001\u0000\u0000\u0000\u00a6\u00a0\u0001\u0000\u0000\u0000"+
		"\u00a6\u00a7\u0001\u0000\u0000\u0000\u00a7\u0014\u0001\u0000\u0000\u0000"+
		"\u00a8\u00a9\u0005t\u0000\u0000\u00a9\u00aa\u0005r\u0000\u0000\u00aa\u00ab"+
		"\u0005u\u0000\u0000\u00ab\u00b2\u0005e\u0000\u0000\u00ac\u00ad\u0005f"+
		"\u0000\u0000\u00ad\u00ae\u0005a\u0000\u0000\u00ae\u00af\u0005l\u0000\u0000"+
		"\u00af\u00b0\u0005s\u0000\u0000\u00b0\u00b2\u0005e\u0000\u0000\u00b1\u00a8"+
		"\u0001\u0000\u0000\u0000\u00b1\u00ac\u0001\u0000\u0000\u0000\u00b2\u0016"+
		"\u0001\u0000\u0000\u0000\u00b3\u00b9\u0005\"\u0000\u0000\u00b4\u00b8\b"+
		"\u0003\u0000\u0000\u00b5\u00b6\u0005\\\u0000\u0000\u00b6\u00b8\t\u0000"+
		"\u0000\u0000\u00b7\u00b4\u0001\u0000\u0000\u0000\u00b7\u00b5\u0001\u0000"+
		"\u0000\u0000\u00b8\u00bb\u0001\u0000\u0000\u0000\u00b9\u00b7\u0001\u0000"+
		"\u0000\u0000\u00b9\u00ba\u0001\u0000\u0000\u0000\u00ba\u00bc\u0001\u0000"+
		"\u0000\u0000\u00bb\u00b9\u0001\u0000\u0000\u0000\u00bc\u00bd\u0005\"\u0000"+
		"\u0000\u00bd\u0018\u0001\u0000\u0000\u0000\u00be\u00c0\u0007\u0004\u0000"+
		"\u0000\u00bf\u00be\u0001\u0000\u0000\u0000\u00c0\u00c1\u0001\u0000\u0000"+
		"\u0000\u00c1\u00bf\u0001\u0000\u0000\u0000\u00c1\u00c2\u0001\u0000\u0000"+
		"\u0000\u00c2\u00c3\u0001\u0000\u0000\u0000\u00c3\u00c4\u0006\f\u0000\u0000"+
		"\u00c4\u001a\u0001\u0000\u0000\u0000\n\u00000\u0099\u009e\u00a4\u00a6"+
		"\u00b1\u00b7\u00b9\u00c1\u0001\u0006\u0000\u0000";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}